name: 'Get Build Definition ID'
description: 'Get the build definition ID for a given pipeline name'
inputs:
  pipeline-name: 
    description: 'The name of the pipeline to get the build definition ID for'
    required: true
  ado-token: 
    description: 'The Azure DevOps PAT token'
    required: true
  ado-url: 
    description: 'The Azure DevOps URL'
    required: true
outputs:
  pipeline-id:
    description: 'The build definition ID for the specified pipeline'
    value: ${{ steps.get-build-definition-id.outputs.PIPELINE_ID }}

runs:
  using: "composite"
  steps:
    - name: Get build definition ID
      id: get-build-definition-id
      shell: bash
      run: |
        echo "Getting build definition ID for pipeline ${{ inputs.pipeline-name }}"
        DEF_RESULTS=$(curl -s -H "Authorization: Basic $(echo -n ":${{ inputs.ado-token }}" | base64 -w0)" \
          "${{ inputs.ado-url }}/_apis/build/definitions?name=${{ inputs.pipeline-name }}")

        if [ $(echo "$DEF_RESULTS" | jq .count) -gt 1 ]; then
            echo "Error: More than one pipeline found with name '${{ inputs.pipeline-name }}'."
            exit 1
        elif [ $(echo "$DEF_RESULTS" | jq .count) -eq 0 ]; then
            echo "Error: No pipeline found with name '${{ inputs.pipeline-name }}'."
            exit 1
        else
            BUILD_DEFINITION_ID=$(echo "$DEF_RESULTS" | jq -r '.value[0].id')
            echo "Build definition ID for pipeline '${{ inputs.pipeline-name }}' is $BUILD_DEFINITION_ID."
            echo "PIPELINE_ID=$BUILD_DEFINITION_ID"
            echo "PIPELINE_ID=$BUILD_DEFINITION_ID" >> $GITHUB_ENV
        fi


    - name: Test output
      shell: bash
      run: |
        echo "output: ${{ steps.get-build-definition-id.outputs.PIPELINE_ID }}"
        echo "env: $PIPELINE_ID"
        echo "env: ${{ env.PIPELINE_ID }}"
        echo "b: $BUILD_DEFINITION_ID"
        echo "c: ${{ steps.get-build-definition-id.outputs.BUILD_DEFINITION_ID }}" 



